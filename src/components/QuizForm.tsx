import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Checkbox } from '@/components/ui/checkbox';
import { QuizAnswers } from '@/types';

interface QuizQuestion {
  id: string;
  question: string;
  options: { value: string; label: string; emoji: string }[];
}

const quizQuestions: QuizQuestion[] = [
  {
    id: 'lifestyle',
    question: 'What if you could live anywhere in the world?',
    options: [
      { value: 'nomad', label: 'Working remotely from tropical beaches', emoji: '🏖️' },
      { value: 'city', label: 'Conquering the urban jungle and nightlife', emoji: '🏙️' },
      { value: 'mountain', label: 'Living among mountains and adventure', emoji: '🏔️' },
      { value: 'culture', label: 'Immersed in rich culture and history', emoji: '🏛️' },
    ]
  },
  {
    id: 'personality',
    question: 'What if you had unlimited confidence?',
    options: [
      { value: 'entrepreneur', label: 'Starting the next billion-dollar company', emoji: '🚀' },
      { value: 'artist', label: 'Creating masterpieces that inspire millions', emoji: '🎨' },
      { value: 'explorer', label: 'Discovering hidden corners of the world', emoji: '🗺️' },
      { value: 'leader', label: 'Leading movements that change society', emoji: '👑' },
    ]
  },
  {
    id: 'adventure',
    question: 'What if money was no object?',
    options: [
      { value: 'luxury', label: 'Private jets and Michelin-starred dinners', emoji: '✈️' },
      { value: 'experiences', label: 'Unique adventures money can\'t usually buy', emoji: '🎪' },
      { value: 'impact', label: 'Funding projects that save the planet', emoji: '🌍' },
      { value: 'freedom', label: 'Complete freedom to follow every whim', emoji: '🦋' },
    ]
  },
  {
    id: 'interests',
    question: 'What interests you most when traveling?',
    options: [
      { value: 'food_culture', label: 'Food scenes, local markets, and authentic cuisine', emoji: '🍜' },
      { value: 'nightlife_social', label: 'Nightlife, bars, music, and social experiences', emoji: '🌃' },
      { value: 'art_history', label: 'Museums, art galleries, and historical sites', emoji: '🎨' },
      { value: 'nature_adventure', label: 'Outdoor activities, nature, and adventures', emoji: '🌲' },
    ]
  },
  {
    id: 'budget',
    question: 'What\'s your travel style when it comes to budget?',
    options: [
      { value: 'luxury', label: 'Luxury all the way - money is no object', emoji: '💎' },
      { value: 'comfort', label: 'Comfortable with some splurges on experiences', emoji: '✨' },
      { value: 'balanced', label: 'Mix of budget-friendly and mid-range options', emoji: '⚖️' },
      { value: 'budget', label: 'Backpacker style - maximize experiences, minimize cost', emoji: '🎒' },
    ]
  }
];


interface QuizFormProps {
  onComplete: (data: QuizAnswers) => void;
}

export const QuizForm: React.FC<QuizFormProps> = ({ onComplete }) => {
  const [step, setStep] = useState(0);
  const [answers, setAnswers] = useState<Partial<QuizAnswers>>({});

  const totalSteps = 6; // 5 quiz questions + 1 trip dates

  const handleQuizAnswer = (value: string) => {
    const questionId = quizQuestions[step].id;
    setAnswers(prev => ({ ...prev, [questionId]: value }));
    setStep(step + 1);
  };

  const handleTripDetails = () => {
    // Final step - submit with all data
    const finalAnswers: QuizAnswers = {
      lifestyle: answers.lifestyle || '',
      personality: answers.personality || '',
      adventure: answers.adventure || '',
      interests: answers.interests || '',
      budget: answers.budget || '',
      cityName: '', // Will be determined by AI
      startDate: answers.startDate || '',
      endDate: answers.endDate || '',
      tripName: '', // Will be generated by AI
      activities: '',
      foodDrinks: '',
      entertainment: '',
      sightseeing: '',
      relaxation: '',
      customInputs: {}
    };
    onComplete(finalAnswers);
  };

  // Question 1: Text Input for Lifestyle (Step 0)
  if (step === 0) {
    return (
      <div className="space-y-8">
        <div className="text-center">
          <div className="text-sm text-muted-foreground mb-2">
            Question 1 of {totalSteps}
          </div>
          <h2 className="text-2xl font-montserrat font-semibold mb-4">
            What if you could live anywhere in the world?
          </h2>
          <p className="text-sm text-muted-foreground mb-8">
            Describe your dream lifestyle and where you'd want to experience it
          </p>
        </div>

        <div className="space-y-6">
          <Textarea
            placeholder="e.g., I would wanna be a student in Mumbai and explore the city, a billionaire exploring Dubai's luxury scene, a chef discovering Bangkok's food culture..."
            value={answers.lifestyle || ''}
            onChange={(e) => setAnswers(prev => ({ ...prev, lifestyle: e.target.value }))}
            className="glass-card min-h-[120px]"
            rows={4}
          />
          
          <div className="text-sm text-muted-foreground">
            <p className="mb-2 font-medium">Examples to inspire you (include your role/persona):</p>
            <div className="grid grid-cols-1 gap-2 text-xs">
              <div>🎓 I would wanna be a student in Mumbai and explore the city</div>
              <div>💎 I would wanna be a billionaire exploring Dubai's luxury scene</div>
              <div>💼 I would wanna be a corporate executive networking in Singapore</div>
              <div>🎨 I would wanna be an artist living in Paris and finding inspiration</div>
              <div>👨‍🍳 I would wanna be a chef discovering Bangkok's authentic food culture</div>
              <div>🏎️ I would wanna be a racer experiencing Monaco's adrenaline scene</div>
            </div>
          </div>
        </div>

        <Button 
          onClick={() => setStep(1)}
          className="w-full glass-button"
          disabled={!answers.lifestyle?.trim()}
        >
          Next Question
        </Button>
      </div>
    );
  }

  // Quiz Questions (Steps 1-4)
  if (step < 5) {
    const currentQ = quizQuestions[step];
    return (
      <div className="space-y-8">
        <div className="text-center">
          <div className="text-sm text-muted-foreground mb-2">
            Question {step + 1} of {totalSteps}
          </div>
          <h2 className="text-2xl font-montserrat font-semibold mb-8">
            {currentQ.question}
          </h2>
        </div>

        <RadioGroup
          value={answers[currentQ.id as keyof QuizAnswers] as string || ''}
          onValueChange={handleQuizAnswer}
          className="space-y-4"
        >
          {currentQ.options.map((option) => (
            <Card 
              key={option.value} 
              className="glass-card p-6 cursor-pointer transition-all hover:border-primary/50 hover:shadow-neon"
            >
              <Label 
                htmlFor={option.value}
                className="flex items-center gap-4 cursor-pointer w-full"
              >
                <RadioGroupItem value={option.value} id={option.value} />
                <span className="text-2xl">{option.emoji}</span>
                <span className="flex-1 text-left">{option.label}</span>
              </Label>
            </Card>
          ))}
        </RadioGroup>

        <Button 
          variant="outline" 
          onClick={() => setStep(step - 1)}
          className="w-full"
        >
          Previous Question
        </Button>
      </div>
    );
  }

  // Trip Dates (Step 5)
  if (step === 5) {
    return (
      <div className="space-y-8">
        <div className="text-center">
          <div className="text-sm text-muted-foreground mb-2">
            Step {step + 1} of {totalSteps}
          </div>
          <h2 className="text-2xl font-montserrat font-semibold mb-4">
            When would you like to travel?
          </h2>
          <p className="text-sm text-muted-foreground mb-8">
            Our AI will determine the perfect destination based on your parallel life preferences
          </p>
        </div>

        <div className="space-y-6">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="startDate" className="text-base font-medium mb-2 block">
                Start Date
              </Label>
              <Input
                id="startDate"
                type="date"
                value={answers.startDate || ''}
                onChange={(e) => setAnswers(prev => ({ ...prev, startDate: e.target.value }))}
                className="glass-card"
              />
            </div>
            <div>
              <Label htmlFor="endDate" className="text-base font-medium mb-2 block">
                End Date
              </Label>
              <Input
                id="endDate"
                type="date"
                value={answers.endDate || ''}
                onChange={(e) => setAnswers(prev => ({ ...prev, endDate: e.target.value }))}
                className="glass-card"
              />
            </div>
          </div>

          <div className="text-sm text-muted-foreground bg-primary/5 p-4 rounded-lg">
            <p className="font-medium mb-2">✨ AI will create your perfect trip</p>
            <ul className="text-xs space-y-1">
              <li>• Determine ideal destination based on your parallel life</li>
              <li>• Generate a creative trip name</li>
              <li>• Create detailed day-by-day itinerary</li>
              <li>• Match your interests and budget preferences</li>
            </ul>
          </div>
        </div>

        <div className="flex gap-4">
          <Button 
            variant="outline" 
            onClick={() => setStep(step - 1)}
            className="flex-1"
          >
            Previous
          </Button>
          <Button 
            onClick={handleTripDetails}
            className="flex-1 glass-button"
            disabled={!answers.startDate || !answers.endDate}
          >
            Generate My Trip
          </Button>
        </div>
      </div>
    );
  }

  return null; // Should not reach here
};